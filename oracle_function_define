用户自定义函数是存储在数据库中的代码块，可以把值返回到调用程序。函数的参数有3种类型：

（1）in参数类型：表示输入给函数的参数，该参数只能用于传值，不能被赋值。

（2）out参数类型：表示参数在函数中被赋值，可以传给函数调用程序，该参数只能用于赋值，不能用于传值。

（3）in out参数类型：表示参数既可以传值，也可以被赋值。

1.函数的创建

语法格式：


    create [or replace] function functionName  
    (  
        parameterName1 mode1 dataType1,  
        parameterName2 mode2 dataType2,  
        ...  
    )  
    return returnDataType  
    is/as  
    begin  
        function_body  
        return expression  
    end functionName; -- 结束函数的声明，也可以直接写end不加函数名。  
--其中mode1、mode2表示参数类型，dataType表示参数的数据类型。returnDataType表示返回值类型。  
 
 
 示例1：

create or replace function explainParameter -- 定义一个名为explainParameter的函数  
(  
    inParam in char,    --  定义该参数类型为in参数类型，只能用于传值  
    outParam out char,  --  out参数类型，只能用于赋值  
    inAndOutParam in out char   --  in out参数类型，既能赋值，又能传值  
)  
return char     --  表示函数的返回类型为char类型  
as      -- 表示函数体部分  
    returnChar char;        --  声明零时变量，这是可有可无的，这里声明返回变量为char类型的returnChar变量。  
begin  
    inParam := 'Hello World';   -- 这是错误的，in类型的参数只能用来传值，不能赋值  
    outParam := 'Hello World'; -- 这是正确的，out类型的参数可以用来被赋值  
    inAndOutParam := 'Hello World'; -- 这是正确的，in out参数既可以用来传值，又可以被赋值  
    inAndOutParam := outParam; -- 这是错误的，out参数不能用来传值  
    return(returnChar); -- 返回returnChar，也可以不要括号，直接写return returnChar。  
end explainParameter; -- 结束explainParameter函数，表示explainParameter函数声明结束，也可以直接写end，不加函数名。  


2.函数的调用

自定义函数的调用方法跟系统内置函数的调用方法相同，可以直接在select语句中调用，也可以在函数中调用，如下：

select testFunc(1,2) from tableName;

num := testFunc(1,2);

3.函数的删除

自定义函数的删除方法类似于表的删除，语法格式如下：

drop function [schema.]functionName;

过程定义：
存储过程（Stored Procedure ）是一组为了完成特定功能的SQL 语句集，经编译后存储在数据库中。用户通过指定存储过程的名字并给出参数（如果该存储过程

带有参数）来执行它。

存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程。

存储过程是由流控制和SQL 语句书写的过程，这个过程经编译和优化后存储在数据库服务器中，应用程序使用时只要调用即可。

在Oracle 中，若干个有联系的过程可以组合在一起构成程序包。



优 点：

1. 存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。

2.当对数据库进行复杂操作时(如对多个表进行Update、Insert、Query、Delete时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。

3.存储过程可以重复使用,可减少数据库开发人员的工作量。

4.安全性高,可设定只有某用户才具有对指定存储过程的使用权。

procedure demo:
  PROCEDURE main(p_file_id     IN INTEGER,
                 p_template_cd IN gbk_file_template.template_cd%TYPE,
                 p_result      OUT VARCHAR2) IS
    l_cnt NUMBER;
    e_invalid EXCEPTION;
  BEGIN
    SELECT COUNT(1) INTO l_cnt FROM gbk_file WHERE file_id = p_file_id;

    IF NVL(l_cnt, 0) != 1 THEN
      p_result := 'Invalid File ID=' || p_file_id;
      RAISE e_invalid;
    END IF;

    CASE p_template_cd
      WHEN 'T1' THEN
        template_T1(p_file_id, p_result);
      WHEN 'T2' THEN
        template_T2(p_file_id, p_result);
      WHEN 'T3' THEN
        template_T3(p_file_id, p_result);
      WHEN 'T4' THEN
        template_T4(p_file_id, p_result);
      WHEN 'T5' THEN
        template_T5(p_file_id, p_result);
      WHEN 'T6' THEN
        template_T6(p_file_id, p_result);
      WHEN 'T7' THEN
        template_T7(p_file_id, p_result);
      WHEN 'T8' THEN
        template_T8(p_file_id, p_result);
      WHEN 'T9' THEN
        template_T9(p_file_id, p_result);
    END CASE;

    COMMIT;
  EXCEPTION
    WHEN e_invalid THEN
      RAISE;
    WHEN OTHERS THEN
      p_result := SUBSTR(SQLERRM, 1, 200);
  END main;
END;

